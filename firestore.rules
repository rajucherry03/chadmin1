rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isController() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'controller';
    }
    
    function isRegistrar() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'registrar';
    }
    
    function isHOD() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hod';
    }
    
    function isFaculty() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isActiveUser() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDepartmentMember(department) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == department;
    }
    
    function canViewStudent(studentId) {
      return isAdmin() || isController() || isRegistrar() || isHOD() || isFaculty() || 
        (isStudent() && isOwner(studentId));
    }
    
    function canModifyStudent(studentId) {
      return isAdmin() || isController() || isRegistrar() || isHOD();
    }
    
    function canViewMarks(courseId, examId) {
      return isAdmin() || isController() || isRegistrar() || isHOD() || 
        (isFaculty() && isDepartmentMember(resource.data.department));
    }
    
    function canModifyMarks(courseId, examId) {
      return isAdmin() || isController() || isHOD() || 
        (isFaculty() && isDepartmentMember(resource.data.department));
    }
    
    function canPublishResults() {
      return isAdmin() || isController() || isRegistrar();
    }
    
    function canGenerateTranscripts() {
      return isAdmin() || isController() || isRegistrar();
    }
    
    function canManageRevaluation() {
      return isAdmin() || isController() || isHOD();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Students collection
    match /students/{studentId} {
      allow read: if canViewStudent(studentId);
      allow create: if isAdmin() || isController() || isHOD();
      allow update: if canModifyStudent(studentId);
      allow delete: if isAdmin();
    }
    
    // Programs collection
    match /programs/{programId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController() || isHOD();
    }
    
    // Exams collection
    match /exams/{examId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController() || isHOD();
    }
    
    // Enrollments collection
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController() || isHOD();
    }
    
    // Marks collection - Most sensitive data
    match /marks/{markId} {
      allow read: if canViewMarks(resource.data.courseId, resource.data.examId);
      allow create: if canModifyMarks(resource.data.courseId, resource.data.examId);
      allow update: if canModifyMarks(resource.data.courseId, resource.data.examId) && 
        (resource.data.status == 'draft' || 
         (resource.data.status == 'submitted' && isHOD()) ||
         (resource.data.status == 'under_moderation' && isHOD()) ||
         (resource.data.status == 'approved' && canPublishResults()));
      allow delete: if isAdmin();
      
      // Validate marks data
      function validateMarksData() {
        let data = request.resource.data;
        return data.marksObtained >= 0 && 
               data.marksObtained <= data.maxMarks &&
               data.maxMarks > 0 &&
               data.percentage >= 0 &&
               data.percentage <= 100;
      }
      
      allow create, update: if validateMarksData();
    }
    
    // Grades collection
    match /grades/{gradeId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() || isController() || isHOD();
      allow delete: if isAdmin();
    }
    
    // Grade Schemes collection
    match /gradeSchemes/{schemeId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController();
    }
    
    // SGPA Records collection
    match /sgpaRecords/{recordId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() || isController();
      allow delete: if isAdmin();
    }
    
    // Revaluation Requests collection
    match /revaluationRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.studentId) || canManageRevaluation());
      allow create: if isStudent() && isOwner(resource.data.studentId);
      allow update: if canManageRevaluation() || 
        (isStudent() && isOwner(resource.data.studentId) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }
    
    // Supplementary Exams collection
    match /supplementaryExams/{examId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin() || isController();
    }
    
    // Transcripts collection
    match /transcripts/{transcriptId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.studentId) || canGenerateTranscripts());
      allow create, update: if canGenerateTranscripts();
      allow delete: if isAdmin();
    }
    
    // Result Publications collection
    match /resultPublications/{publicationId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if canPublishResults();
    }
    
    // Audit Logs collection - Read-only for most users
    match /auditLogs/{logId} {
      allow read: if isAdmin() || isController() || isRegistrar();
      allow create: if isAuthenticated(); // All authenticated users can create audit logs
      allow update, delete: if false; // Audit logs should never be modified or deleted
    }
    
    // Additional security rules for specific operations
    
    // Prevent deletion of published results
    match /marks/{markId} {
      allow delete: if resource.data.status != 'published';
    }
    
    // Prevent modification of published grades
    match /grades/{gradeId} {
      allow update: if resource.data.status != 'published';
    }
    
    // Prevent modification of published transcripts
    match /transcripts/{transcriptId} {
      allow update: if resource.data.status != 'generated';
    }
    
    // Rate limiting for revaluation requests
    match /revaluationRequests/{requestId} {
      allow create: if isStudent() && 
        getAfter(/databases/$(database)/documents/revaluationRequests)
        .where('studentId', '==', request.auth.uid)
        .where('status', 'in', ['pending', 'approved'])
        .size() < 5; // Maximum 5 active requests per student
    }
    
    // Prevent duplicate enrollments
    match /enrollments/{enrollmentId} {
      allow create: if !exists(/databases/$(database)/documents/enrollments
        .where('studentId', '==', request.resource.data.studentId)
        .where('courseId', '==', request.resource.data.courseId)
        .where('semester', '==', request.resource.data.semester));
    }
    
    // Validate workflow transitions
    match /marks/{markId} {
      function isValidWorkflowTransition() {
        let currentStatus = resource.data.status;
        let newStatus = request.resource.data.status;
        
        // Define valid transitions
        let validTransitions = {
          'draft': ['submitted'],
          'submitted': ['under_moderation', 'draft'],
          'under_moderation': ['approved', 'rejected', 'submitted'],
          'approved': ['published', 'under_moderation'],
          'published': [] // No further transitions allowed
        };
        
        return validTransitions[currentStatus].hasAny([newStatus]);
      }
      
      allow update: if isValidWorkflowTransition();
    }
    
    // Data validation rules
    match /students/{studentId} {
      function validateStudentData() {
        let data = request.resource.data;
        return data.rollNo.matches('^[0-9]{2}[A-Z]{2}[0-9]{3}$') &&
               data.email.matches('^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$') &&
               data.attendance >= 0 && data.attendance <= 100;
      }
      
      allow create, update: if validateStudentData();
    }
    
    match /courses/{courseId} {
      function validateCourseData() {
        let data = request.resource.data;
        return data.code.matches('^[A-Z]{2}[0-9]{3}$') &&
               data.credits >= 1 && data.credits <= 6;
      }
      
      allow create, update: if validateCourseData();
    }
    
    // Prevent access to sensitive fields
    match /users/{userId} {
      function sanitizeUserData() {
        let data = request.resource.data;
        return !('password' in data) && !('secretKey' in data);
      }
      
      allow create, update: if sanitizeUserData();
    }
    
    // Time-based access restrictions
    match /marks/{markId} {
      function isWithinExamPeriod() {
        let examId = resource.data.examId;
        let exam = get(/databases/$(database)/documents/exams/$(examId)).data;
        let now = request.time;
        return now >= exam.startDate && now <= exam.endDate;
      }
      
      // Allow marks entry only during exam period
      allow create: if isWithinExamPeriod();
    }
    
    // Department-based access control
    match /marks/{markId} {
      function isDepartmentFaculty() {
        let courseId = resource.data.courseId;
        let course = get(/databases/$(database)/documents/courses/$(courseId)).data;
        return isFaculty() && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == course.department;
      }
      
      allow read, write: if isDepartmentFaculty();
    }
    
    // Prevent data tampering
    match /auditLogs/{logId} {
      function validateAuditLog() {
        let data = request.resource.data;
        return data.timestamp == request.time &&
               data.userId == request.auth.uid &&
               data.userEmail == request.auth.token.email;
      }
      
      allow create: if validateAuditLog();
    }
    
    // Batch operations validation
    match /{document=**} {
      allow write: if request.auth != null && 
        request.auth.token.email_verified == true;
    }
  }
}
